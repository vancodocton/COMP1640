@model WebApp.Models.Idea

@{
    ViewData["Title"] = "Idea";
    //Layout = "~/Views/Shared/_ForumLayout.cshtml";
}

<a asp-action="Index">Forum Home</a>

<div class="card mb-3" id="idea-@Model.Id">
    <div class="card-body">
        <h5 class="card-title">
            @Html.DisplayFor(modelItem => Model.Title)
        </h5>
        <p class="card-text">
            @Html.DisplayFor(modelItem => Model.Content)
        </p>
    </div>
    <div class="card-footer">
        <div class="row">
            <div class="col-sm">
                <div id="react-Model" class="btn-group" role="group" aria-label="React button group @Model.Id">
                    <input type="checkbox" class="btn-check" name="radio1" id="ThumbUp" autocomplete="off" data-checked="Thumbed Up" data-unchecked="Thumb Up" data-loading-text="Loading">
                    <label class="btn btn-outline-primary" for="ThumbUp">
                        <i class="fa-regular fa-thumbs-up"></i>
                        <span id="thumbupstatus" data-checked="Thumbed Up" data-unchecked="Thumb Up" data-loading-text="fuck">Thumb Up</span>
                    </label>

                    <input type="checkbox" class="btn-check" name="radio1" id="ThumbDown" autocomplete="off" data-checked="Thumbed Down" data-unchecked="Thumb Down" data-loading-text="Loading">
                    <label class="btn btn-outline-danger" for="ThumbDown">
                        <i class="fa-regular fa-thumbs-down"></i>
                        <span id="thumbdownstatus">Thumb Down</span>
                    </label>
                </div>
            </div>

            <div class="d-inline-flex col-sm justify-content-end align-items-center">
                <div class="px-2">
                    <i class="fa-solid fa-thumbs-up text-primary"></i>
                    <span id="countthumbup">NaN</span>
                </div>

                <div class="px-2">
                    <i class="fa-solid fa-thumbs-down text-danger"></i>
                    <span id="countthumbdown">NaN</span>
                </div>

                <div class="px-2">
                    <i class="fa-solid fa-comments"></i>
                    <span id="countcomment">NaN</span>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="container">
        <div class="input-group">
            <span class="input-group-text">COMMENT</span>
            <input placeholder="Type comment..." type="text" class="form-control" id="comment" aria-label="new comment" required>
            <button type="submit" id="sendComment" class="btn btn-primary">Send</button>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <ul id="commentsList">
                <br><h5>List of previous comments</h5><br>
                @foreach (var cmt in Model.Comments)
                {
                    <div class="card" style="width:75rem;">
                      <div class="card-body bg-light">
                        <p>"@cmt.Content"</p>
                        <div class="d-flex justify-content-between">
                          <div class="d-flex flex-row align-items-center">
                            <span class="fst-italic">Written by &nbsp;</span><i class="fa-solid fa-user"></i>
                            <p class="small mb-0 ms-2"><b>@cmt.User.UserName</b></p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <br>
                }
            </ul>
        </div>
    </div>
</div>

@section Scripts{
<script src="~/js/signalr/dist/browser/signalr.js"></script>
@*<script src="~/js/user_idea_react.js></script>*@
<script type="text/javascript">
    const ideaId = @Model.Id;

    function disableInteract(){
        document.getElementById("ThumbUp").disabled = true;
        document.getElementById("ThumbDown").disabled = true;
        document.getElementById("sendComment").disabled = true;
    }

    function enableInteract(){
        document.getElementById("ThumbUp").disabled = false;
        document.getElementById("ThumbDown").disabled = false;
        document.getElementById("sendComment").disabled = false;
    }

    // disable button. enable it untils the connection is started.
    disableInteract();

    var connection = new signalR
    .HubConnectionBuilder()
    .withAutomaticReconnect()
    .configureLogging(signalR.LogLevel.Information)
    .withUrl("/ideaInteractHub")
    .build();

    connection.on("IdeaStatus", (res) => {
        $('#countthumbup').html(res.thumbUp);
        $('#countthumbdown').html(res.thumbDown);
        $('#countcomment').html(res.numComment);
    });

    connection.on("ReactIdeaResponse", (res) => {
        // reset
        console.log(res);
        if (res.ideaId == ideaId) {
            $(`#react-Model input`).prop('checked', false)
            var status = $(`#react-Model span`);
            var unchecked = $(`#react-Model input`);

            for(var i = 0; i < status.length; i++) {
                status[i].innerText = unchecked[i].getAttribute('data-unchecked');
            }

            // load again
            if (res.react != null) {
                $(`#${res.react}`).prop('checked', true);
                var checkedstatus = $(`#${res.react}`).data('checked');
                $(`label[for=${res.react}] span`).text(checkedstatus);
            }
        }
    });

    connection.on("ReceiveComment", (res) => {
        var cmt = document.createElement('li');
        cmt.innerHTML = `<li><b>${res.userName}</b>: ${res.content}</li>`;

        $('#commentsList').append(cmt);
    });

    connection.onreconnecting((er) => {
        console.log(er);
        disableInteract();
    });
    connection.onreconnected((er) => {
        console.log(er);
        enableInteract();
    });

    connection.start().then(function () {
        enableInteract();
        connection.invoke("RegisterIdeaStatus", ideaId);
    }).catch(function (er) {
        console.log(er);
    });

    $('#react-Model input').click(function(event) {
        console.log(event.target.id);

        var isChecked = event.target.checked;

        $('#react-Model input').prop('checked', false);

        event.target.checked = isChecked;

        if (isChecked) {
            console.log('update')

            connection.invoke("ReactIdea", {
                ideaId: ideaId,
                type: 'update',
                newreact: event.target.id
            });

        }
        else {
            console.log('delete')
            connection.invoke("ReactIdea", {
                ideaId: ideaId,
                type: 'delete',
            });
        }
        $(`label[for=${event.target.id}] span`).html('Loading...');
    });

    $('#sendComment').click(function(event) {
        var comment = $('#comment').val();

        $('#comment').val("");

        connection.invoke("CommentIdea", {
            ideaId: ideaId,
            content: comment
        });
    });
</script>
}